@model List<JobPosting>
@{
    ViewData["Title"] = "İş İlanları";
}

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-2xl font-bold text-gray-900">Açık Pozisyonlar</h1>
            <p class="mt-2 text-sm text-gray-500">Şu anda @Model.Count aktif iş ilanı bulunmaktadır.</p>
        </div>

        <!-- Filters -->
        <div class="mb-6 grid grid-cols-1 gap-4 sm:grid-cols-4">
            <input type="text" id="searchInput" placeholder="İş ilanlarında ara..." 
                   class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            
            <select id="locationFilter" class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="">Tüm Lokasyonlar</option>
                @{
                    var locations = Model.Select(j => j.Location).Distinct().OrderBy(l => l);
                    foreach (var location in locations)
                    {
                        <option value="@location">@location</option>
                    }
                }
            </select>

            <select id="experienceFilter" class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="">Tüm Deneyim Seviyeleri</option>
                <option value="0-2">0-2 Yıl</option>
                <option value="3-5">3-5 Yıl</option>
                <option value="5+">5+ Yıl</option>
            </select>

            <select id="sortBy" class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="date">Tarihe Göre</option>
                <option value="salary">Maaşa Göre</option>
                <option value="experience">Deneyime Göre</option>
            </select>
        </div>

        <!-- Job Cards Grid -->
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
            @foreach (var job in Model)
            {
                <div class="job-card bg-white rounded-lg shadow-sm hover:shadow-lg transition-shadow duration-200 overflow-hidden">
                    <div class="p-6">
                        <div class="flex justify-between items-start">
                            <div>
                                <h2 class="text-xl font-semibold text-gray-900">
                                    <a href="@Url.Action("Details", "JobPosting", new { id = job.Id })" class="hover:text-blue-600">
                                        @job.Title
                                    </a>
                                </h2>
                                <p class="text-sm text-gray-500">@job.CompanyName</p>
                            </div>
                            @if (job.IsRemote)
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    Uzaktan
                                </span>
                            }
                        </div>

                        <div class="mt-4">
                            <p class="text-sm text-gray-600 line-clamp-3">@job.Description</p>
                        </div>

                        <div class="mt-4">
                            <div class="flex flex-wrap gap-2">
                                @foreach (var skill in job.RequiredSkills.Split(',').Take(3))
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        @skill.Trim()
                                    </span>
                                }
                                @if (job.RequiredSkills.Split(',').Length > 3)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                        +@(job.RequiredSkills.Split(',').Length - 3)
                                    </span>
                                }
                            </div>
                        </div>

                        <div class="mt-6 flex items-center justify-between text-sm">
                            <div class="flex items-center text-gray-500">
                                <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                </svg>
                                @job.Location
                            </div>
                            <div class="flex items-center text-gray-500">
                                <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                @job.RequiredExperience yıl
                            </div>
                        </div>

                        <div class="mt-4 flex justify-between items-center">
                            <div class="text-sm text-gray-500">
                                @{
                                    var daysAgo = (DateTime.Now - job.CreatedDate).Days;
                                    if (daysAgo == 0)
                                    {
                                        <span>Bugün</span>
                                    }
                                    else if (daysAgo == 1)
                                    {
                                        <span>Dün</span>
                                    }
                                    else
                                    {
                                        <span>@daysAgo gün önce</span>
                                    }
                                }
                            </div>
                            <a href="@Url.Action("Details", "JobPosting", new { id = job.Id })" 
                               class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                                Detaylar
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Arama ve filtreleme fonksiyonları
        document.getElementById('searchInput').addEventListener('input', filterJobs);
        document.getElementById('locationFilter').addEventListener('change', filterJobs);
        document.getElementById('experienceFilter').addEventListener('change', filterJobs);
        document.getElementById('sortBy').addEventListener('change', sortJobs);

        function filterJobs() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const location = document.getElementById('locationFilter').value;
            const experience = document.getElementById('experienceFilter').value;
            
            document.querySelectorAll('.job-card').forEach(card => {
                const title = card.querySelector('h2').textContent.toLowerCase();
                const company = card.querySelector('.text-gray-500').textContent.toLowerCase();
                const cardLocation = card.querySelector('.text-gray-500').textContent;
                const cardExperience = parseInt(card.querySelector('.text-gray-500:last-child').textContent);
                
                let show = true;
                
                // Arama filtresi
                if (!title.includes(searchTerm) && !company.includes(searchTerm)) {
                    show = false;
                }
                
                // Lokasyon filtresi
                if (location && cardLocation !== location) {
                    show = false;
                }
                
                // Deneyim filtresi
                if (experience) {
                    const [min, max] = experience.split('-').map(Number);
                    if (max && (cardExperience < min || cardExperience > max)) {
                        show = false;
                    } else if (!max && cardExperience < min) {
                        show = false;
                    }
                }
                
                card.style.display = show ? '' : 'none';
            });
        }

        function sortJobs() {
            const sortBy = document.getElementById('sortBy').value;
            const container = document.querySelector('.grid');
            const cards = Array.from(container.children);
            
            cards.sort((a, b) => {
                if (sortBy === 'date') {
                    const dateA = new Date(a.dataset.date);
                    const dateB = new Date(b.dataset.date);
                    return dateB - dateA;
                } else if (sortBy === 'salary') {
                    const salaryA = parseInt(a.dataset.salary);
                    const salaryB = parseInt(b.dataset.salary);
                    return salaryB - salaryA;
                } else if (sortBy === 'experience') {
                    const expA = parseInt(a.dataset.experience);
                    const expB = parseInt(b.dataset.experience);
                    return expB - expA;
                }
            });
            
            cards.forEach(card => container.appendChild(card));
        }
    </script>
} 