@model List<ChatMessage>
@{
    ViewData["Title"] = "CV Asistanı";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <div class="max-w-6xl mx-auto p-6">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-xl font-semibold text-gray-900">CV Asistanı</h1>
                        <p class="text-sm text-gray-500">CV'nizi analiz edin ve kariyer tavsiyeleri alın</p>
                    </div>
                </div>
                <a href="/Home/Index" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </a>
            </div>
        </div>

        <div class="flex gap-6">
            <!-- Left Side - CV Selection -->
            <div class="w-1/3">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h2 class="text-lg font-semibold text-gray-900 mb-4">CV Seçimi</h2>
                    <div id="cvList" class="space-y-3">
                        <div class="text-center py-8">
                            <svg class="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"/>
                            </svg>
                            <p class="text-sm text-gray-500">CV'ler yükleniyor...</p>
                        </div>
                    </div>
                    
                                         <!-- Analyze Button -->
                     <button id="analyzeButton" class="hidden w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                         Seçili CV'yi Analiz Et
                     </button>
                     
                     <!-- Job Recommendations Button -->
                     <button id="jobRecommendationsButton" class="hidden w-full mt-3 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                         <span class="flex items-center justify-center space-x-2">
                             <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2h8z"/>
                             </svg>
                             <span>Analize Göre İş Tekliflerini Getir</span>
                         </span>
                     </button>
                </div>
            </div>

            <!-- Right Side - Chat -->
            <div class="flex-1">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <!-- Messages Area -->
                    <div id="messagesContainer" class="h-96 overflow-y-auto p-6 space-y-4">
                        @if (Model != null && Model.Any())
                        {
                            foreach (var message in Model.OrderBy(m => m.CreatedDate))
                            {
                                if (message.IsFromBot)
                                {
                                    <div class="flex items-start space-x-3">
                                        <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                                            </svg>
                                        </div>
                                        <div class="flex-1 bg-blue-50 rounded-lg p-3">
                                            <p class="text-sm text-gray-800 whitespace-pre-wrap">@message.Content</p>
                                            <p class="text-xs text-gray-500 mt-1">@message.CreatedDate.ToString("HH:mm")</p>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="flex items-start space-x-3 justify-end">
                                        <div class="flex-1 bg-gray-100 rounded-lg p-3 max-w-xs">
                                            <p class="text-sm text-gray-800">@message.Content</p>
                                            <p class="text-xs text-gray-500 mt-1">@message.CreatedDate.ToString("HH:mm")</p>
                                        </div>
                                        <div class="w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center flex-shrink-0">
                                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                            </svg>
                                        </div>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <div class="text-center py-8">
                                <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                    <svg class="w-8 h-8 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                    </svg>
                                </div>
                                <h3 class="text-lg font-medium text-gray-900 mb-2">CV Asistanına Hoş Geldiniz!</h3>
                                <p class="text-gray-500 mb-4">CV'nizi analiz etmek için sol taraftan bir CV seçin veya aşağıdaki alana mesajınızı yazın.</p>
                                <div class="bg-blue-50 rounded-lg p-4 max-w-md mx-auto">
                                    <p class="text-sm text-blue-800">
                                        <strong>Örnek mesajlar:</strong><br>
                                        • "CV'mi analiz et"<br>
                                        • "Kariyer tavsiyesi ver"<br>
                                        • "Hangi işler bana uygun?"
                                    </p>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Input Area -->
                    <div class="border-t border-gray-200 p-4">
                        <form id="chatForm" class="flex space-x-3">
                            @Html.AntiForgeryToken()
                            <input type="text" id="messageInput" 
                                   class="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                   placeholder="Mesajınızı yazın..." />
                            <button type="submit" id="sendButton"
                                    class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed">
                                <span class="flex items-center space-x-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                    </svg>
                                    <span>Gönder</span>
                                </span>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Chat sayfası yüklendi, event listener\'lar ekleniyor...');
        
        const messagesContainer = document.getElementById('messagesContainer');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatForm = document.getElementById('chatForm');
        const cvList = document.getElementById('cvList');
        const analyzeButton = document.getElementById('analyzeButton');
        const jobRecommendationsButton = document.getElementById('jobRecommendationsButton');
        
        let selectedCvId = null;
        let lastAnalysisResponse = null;
        
        // Scroll to bottom
        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Initial scroll
        scrollToBottom();
        
        // Load CV list
        async function loadCVList() {
            try {
                const response = await fetch('/Resume/GetUserCVs');
                const cvs = await response.json();
                
                if (cvs.length === 0) {
                    cvList.innerHTML = `
                        <div class="text-center py-8">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"/>
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">CV Bulunamadı</h3>
                            <p class="mt-1 text-sm text-gray-500">Henüz CV yüklememişsiniz.</p>
                            <div class="mt-6">
                                <a href="/Resume/Upload" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                                    CV Yükle
                                </a>
                            </div>
                        </div>
                    `;
                    return;
                }

                cvList.innerHTML = '';
                cvs.forEach(cv => {
                    const cvCard = document.createElement('div');
                    cvCard.className = `cv-card cursor-pointer p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow border border-gray-200`;
                    cvCard.setAttribute('data-cv-id', cv.id);
                    cvCard.onclick = () => selectCV(cv.id);
                    cvCard.innerHTML = `
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="font-medium text-gray-900">${cv.title}</h3>
                                <p class="text-sm text-gray-500">${new Date(cv.createdDate).toLocaleDateString()}</p>
                            </div>
                            ${cv.isMainResume ? '<span class="px-2 py-1 text-xs font-medium text-green-600 bg-green-50 rounded-full">Ana CV</span>' : ''}
                        </div>
                        <div class="mt-2">
                            <p class="text-sm text-gray-600 line-clamp-2">${cv.description || 'Açıklama yok'}</p>
                        </div>
                    `;
                    cvList.appendChild(cvCard);
                });

            } catch (error) {
                console.error('CV listesi yüklenirken hata:', error);
                cvList.innerHTML = `
                    <div class="text-center py-8">
                        <p class="text-sm text-red-500">CV'ler yüklenirken bir hata oluştu.</p>
                    </div>
                `;
            }
        }

        // Select CV
        function selectCV(cvId) {
            selectedCvId = cvId;
            
            // Remove selection from all cards
            document.querySelectorAll('.cv-card').forEach(card => {
                card.classList.remove('border-blue-500', 'border-2');
                card.classList.add('border', 'border-gray-200');
            });
            
            // Highlight selected card
            const selectedCard = document.querySelector(`.cv-card[data-cv-id="${cvId}"]`);
            if (selectedCard) {
                selectedCard.classList.remove('border', 'border-gray-200');
                selectedCard.classList.add('border-blue-500', 'border-2');
            }

                         // Show analyze button
             analyzeButton.classList.remove('hidden');
             
             // Hide job recommendations button when new CV is selected
             jobRecommendationsButton.classList.add('hidden');
        }

        // Analyze selected CV
        async function analyzeSelectedCV() {
            if (!selectedCvId) {
                alert('Lütfen bir CV seçin');
                return;
            }

            try {
                analyzeButton.disabled = true;
                analyzeButton.innerHTML = `
                    <svg class="animate-spin h-5 w-5 text-white inline mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Analiz Ediliyor...
                `;

                addMessage('Seçili CV\'yi analiz et', false);
                
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const response = await fetch('/Home/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        content: `CV ID ${selectedCvId} için detaylı bir analiz yapar mısın? Güçlü yönleri, geliştirilmesi gereken alanları ve önerileri belirt.`
                    })
                });

                const data = await response.json();

                analyzeButton.disabled = false;
                analyzeButton.innerHTML = 'Seçili CV\'yi Analiz Et';

                                 if (data.success) {
                     lastAnalysisResponse = data.response;
                     addMessage(data.response, true);
                     
                     // Show job recommendations button after successful analysis
                     jobRecommendationsButton.classList.remove('hidden');
                 } else {
                     throw new Error(data.error || 'Analiz sırasında bir hata oluştu');
                 }
            } catch (error) {
                console.error('CV analizi sırasında hata:', error);
                addMessage('CV analizi sırasında bir hata oluştu: ' + error.message, true);
                
                analyzeButton.disabled = false;
                analyzeButton.innerHTML = 'Seçili CV\'yi Analiz Et';
            }
        }

        // Send message function
        async function sendMessage(content) {
            try {
                sendButton.disabled = true;
                sendButton.innerHTML = `
                    <svg class="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span class="ml-2">Gönderiliyor...</span>
                `;
                
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const response = await fetch('/Home/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ content: content })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    // Add user message
                    addMessage(content, false);
                    
                    // Add bot response
                    if (data.response) {
                        addMessage(data.response, true);
                    }
                    
                    // Clear input
                    messageInput.value = '';
                    
                    // Scroll to bottom
                    setTimeout(scrollToBottom, 100);
                } else {
                    console.error('Mesaj gönderilirken hata:', data.error || 'Bilinmeyen hata');
                    alert('Mesaj gönderilirken bir hata oluştu. Lütfen tekrar deneyin.');
                }
            } catch (error) {
                console.error('Mesaj gönderme hatası:', error);
                alert('Mesaj gönderilirken bir hata oluştu. Lütfen tekrar deneyin.');
            } finally {
                sendButton.disabled = false;
                sendButton.innerHTML = `
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                    <span class="ml-2">Gönder</span>
                `;
            }
        }
        
        // Add message to chat
        function addMessage(content, isFromBot) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'flex items-start space-x-3' + (isFromBot ? '' : ' justify-end');
            
            const currentTime = new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' });
            
            if (isFromBot) {
                messageDiv.innerHTML = `
                    <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                        </svg>
                    </div>
                    <div class="flex-1 bg-blue-50 rounded-lg p-3">
                        <p class="text-sm text-gray-800 whitespace-pre-wrap">${content}</p>
                        <p class="text-xs text-gray-500 mt-1">${currentTime}</p>
                    </div>
                `;
            } else {
                messageDiv.innerHTML = `
                    <div class="flex-1 bg-gray-100 rounded-lg p-3 max-w-xs">
                        <p class="text-sm text-gray-800">${content}</p>
                        <p class="text-xs text-gray-500 mt-1">${currentTime}</p>
                    </div>
                    <div class="w-8 h-8 bg-gray-400 rounded-full flex items-center justify-center flex-shrink-0">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </div>
                `;
            }
            
            messagesContainer.appendChild(messageDiv);
        }
        
        // Form submit
        chatForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const content = messageInput.value.trim();
            if (content) {
                sendMessage(content);
            }
        });
        
        // Enter key
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const content = messageInput.value.trim();
                if (content) {
                    sendMessage(content);
                }
            }
        });

                 // Analyze button click
         analyzeButton.addEventListener('click', analyzeSelectedCV);
         
                   // Job recommendations button click
          jobRecommendationsButton.addEventListener('click', function() {
              if (lastAnalysisResponse) {
                  // Extract keywords from analysis for filtering
                  const keywords = extractKeywordsFromAnalysis(lastAnalysisResponse);
                  console.log('Sending keywords:', keywords);
                  
                  // Build URL without double encoding
                  const params = new URLSearchParams();
                  params.append('analysis', lastAnalysisResponse);
                  params.append('keywords', keywords.join(','));
                  params.append('cvId', selectedCvId);
                  
                  // Redirect to job postings with analysis data
                  window.location.href = `/JobPosting/Index?${params.toString()}`;
              } else {
                  alert('Önce bir CV analizi yapmanız gerekiyor.');
              }
          });
         
         // Extract keywords from analysis text
         function extractKeywordsFromAnalysis(analysisText) {
             const keywords = [];
             
                           // Common job-related keywords that match our job postings
              const jobKeywords = [
                  // Technology keywords (only if CV mentions tech skills)
                  'yazılım', 'software', 'developer', 'geliştirici', 'programcı', 'programmer',
                  'mühendis', 'engineer', 'frontend', 'backend', 'full stack', 'fullstack',
                  'devops', 'python', 'java', 'javascript', 'react', 'angular', 'vue',
                  'node.js', 'nodejs', 'asp.net', 'dotnet', 'c#', 'php', 'mysql', 'sql',
                  'mongodb', 'docker', 'kubernetes', 'aws', 'azure', 'cloud', 'ci/cd',
                  'machine learning', 'ai', 'artificial intelligence', 'data science',
                  
                  // Business keywords
                  'pazarlama', 'marketing', 'satış', 'sales', 'müşteri', 'customer',
                  'yönetim', 'management', 'finans', 'finance', 'muhasebe', 'accounting',
                  'insan kaynakları', 'hr', 'human resources', 'eğitim', 'education',
                  'sağlık', 'health', 'turizm', 'tourism', 'medya', 'media',
                  'reklam', 'advertising', 'iletişim', 'communication', 'hukuk', 'law',
                  'mimarlık', 'architecture', 'inşaat', 'construction', 'lojistik', 'logistics',
                  'üretim', 'production', 'kalite', 'quality', 'güvenlik', 'security',
                  'teknoloji', 'technology', 'veri', 'data', 'analiz', 'analysis',
                  'proje', 'project', 'operasyon', 'operation', 'strateji', 'strategy',
                  'planlama', 'planning', 'araştırma', 'research', 'senior', 'junior',
                  'stajyer', 'intern', 'staj', 'internship', 'information technology'
              ];
             
             const lowerText = analysisText.toLowerCase();
             
                           // Extract keywords that appear in the analysis with context awareness
              const techKeywords = ['yazılım', 'software', 'developer', 'programming', 'coding', 'python', 'java', 'javascript', 'react', 'angular', 'vue', 'node.js', 'asp.net', 'c#', 'php', 'mysql', 'sql', 'mongodb', 'docker', 'aws', 'azure', 'cloud', 'machine learning', 'ai', 'artificial intelligence', 'data science'];
              const businessKeywords = ['pazarlama', 'marketing', 'satış', 'sales', 'müşteri', 'customer', 'yönetim', 'management', 'finans', 'finance', 'muhasebe', 'accounting', 'insan kaynakları', 'hr', 'human resources', 'eğitim', 'education', 'sağlık', 'health', 'turizm', 'tourism', 'medya', 'media', 'reklam', 'advertising', 'iletişim', 'communication', 'hukuk', 'law', 'mimarlık', 'architecture', 'inşaat', 'construction', 'lojistik', 'logistics', 'üretim', 'production', 'kalite', 'quality', 'güvenlik', 'security', 'teknoloji', 'technology', 'veri', 'data', 'analiz', 'analysis', 'proje', 'project', 'operasyon', 'operation', 'strateji', 'strategy', 'planlama', 'planning', 'araştırma', 'research', 'senior', 'junior', 'stajyer', 'intern', 'staj', 'internship', 'information technology'];
              
              // Check if CV has tech-related content
              const hasTechContent = techKeywords.some(keyword => lowerText.includes(keyword.toLowerCase()));
              
              // Extract keywords based on context
              jobKeywords.forEach(keyword => {
                  const lowerKeyword = keyword.toLowerCase();
                  
                  // Only include tech keywords if CV mentions tech skills
                  if (techKeywords.includes(keyword)) {
                      if (hasTechContent && lowerText.includes(lowerKeyword)) {
                          keywords.push(keyword);
                      }
                  }
                  // Always include business keywords if found
                  else if (businessKeywords.includes(keyword) && lowerText.includes(lowerKeyword)) {
                      keywords.push(keyword);
                  }
                  // Include other relevant keywords
                  else if (lowerText.includes(lowerKeyword)) {
                      keywords.push(keyword);
                  }
              });
              
              // If no specific keywords found, add context-appropriate ones
              if (keywords.length === 0) {
                  if (hasTechContent) {
                      keywords.push('developer', 'mühendis', 'yazılım', 'software');
                  } else {
                      keywords.push('satış', 'pazarlama', 'yönetim', 'management');
                  }
              }
             
             console.log('Analysis text:', analysisText);
             console.log('Extracted keywords:', keywords);
             
             return keywords;
         }
         
         // Load CV list on page load
         loadCVList();
        
        console.log('Chat sayfası event listener\'ları eklendi');
    });
</script> 