<!-- Views/Shared/_Layout.cshtml -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ResumeApp</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body class="bg-gray-50">
    @Html.AntiForgeryToken()
    
    <!-- Sidebar -->
    <div class="fixed inset-y-0 left-0 w-64 bg-white shadow-lg z-10">
        <div class="flex flex-col h-full">
            <!-- Logo -->
            <div class="flex items-center justify-center h-16 border-b">
                <a href="/" class="text-xl font-bold text-blue-600">ResumeApp</a>
            </div>

            <!-- Navigation -->
            <nav class="flex-1 px-4 py-4 space-y-1">
                <a href="@Url.Action("Index", "Home")" 
                   class="flex items-center px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg @((Context.Request.RouteValues["Controller"]?.ToString() == "Home") ? "bg-blue-50 text-blue-600" : "")">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                    </svg>
                    Ana Sayfa
                </a>

                <a href="@Url.Action("Index", "Resume")"
                   class="flex items-center px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg @((Context.Request.RouteValues["Controller"]?.ToString() == "Resume") ? "bg-blue-50 text-blue-600" : "")">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    CV'lerim
                </a>

                <a href="@Url.Action("Index", "JobPosting")"
                   class="flex items-center px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg @((Context.Request.RouteValues["Controller"]?.ToString() == "JobPosting") ? "bg-blue-50 text-blue-600" : "")">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                    İş İlanları
                </a>

                <button onclick="toggleChat()"
                   class="w-full flex items-center px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                    </svg>
                    CV Asistanı
                </button>
            </nav>

            <!-- User Info -->
            <div class="p-4 border-t">
                <div class="flex items-center">
                    <div class="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-semibold">
                        A
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-700">Admin User</p>
                        <p class="text-xs text-gray-500">admin@example.com</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="ml-64">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <!-- Chatbot Fullscreen -->
    <div id="chatWindow" class="hidden fixed inset-0 bg-white z-50">
        <div class="flex h-full">
            <!-- Left Side - CVs -->
            <div class="w-1/4 border-r border-gray-200 bg-gray-50 overflow-y-auto">
                <div class="p-4 border-b border-gray-200 bg-white">
                    <h2 class="text-lg font-semibold text-gray-900">CV'lerim</h2>
                    <p class="text-sm text-gray-500">Analiz etmek istediğiniz CV'yi seçin</p>
                </div>
                <div id="cvList" class="p-4 space-y-4">
                    <!-- CV'ler AJAX ile yüklenecek -->
                </div>
            </div>

            <!-- Right Side - Chat -->
            <div class="flex-1 flex flex-col">
                <!-- Chat Header -->
                <div class="p-4 border-b border-gray-200 bg-blue-600">
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-white flex items-center justify-center">
                                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                            <h3 class="ml-3 text-xl font-semibold text-white">CV Asistanı</h3>
                        </div>
                        <button onclick="toggleChat()" class="text-white hover:text-gray-200">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- Chat Messages -->
                <div id="chatMessages" class="flex-1 overflow-y-auto p-6 space-y-6">
                    <!-- Initial message -->
                    <div class="flex items-start max-w-3xl mx-auto">
                        <div class="flex-shrink-0">
                            <div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center">
                                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                        </div>
                        <div class="ml-4 bg-gray-100 rounded-lg py-3 px-4 max-w-[80%]">
                            <p class="text-gray-900">Merhaba! Ben CV Asistanınız. Size nasıl yardımcı olabilirim?</p>
                        </div>
                    </div>
                </div>

                <!-- Chat Input -->
                <div class="p-4 border-t border-gray-200 bg-white">
                    <div class="max-w-3xl mx-auto">
                        <div class="flex space-x-4">
                            <input type="text" id="messageInput" 
                                   class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                   placeholder="Mesajınızı yazın..."
                                   autocomplete="off">
                            <button id="sendButton"
                                    class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed">
                                <span>Gönder</span>
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)

    <script>
        // Debug için global değişkenler
        let isInitialized = false;
        let selectedCvId = null;

        // CSRF Token'ı al
        function getCSRFToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }

        // Sayfa yüklendiğinde çalışacak fonksiyon
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Sayfa yüklendi, event listener\'lar ekleniyor...');
            initializeEventListeners();
            isInitialized = true;
        });

        function initializeEventListeners() {
            // Gönder butonu için event listener
            const sendButton = document.getElementById('sendButton');
            if (sendButton) {
                console.log('Gönder butonu bulundu, click event\'i ekleniyor...');
                sendButton.onclick = function(e) {
                    e.preventDefault();
                    console.log('Gönder butonuna tıklandı');
                    sendMessage();
                };
            } else {
                console.error('Gönder butonu bulunamadı!');
            }

            // Input alanı için event listener
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                console.log('Mesaj input alanı bulundu, keypress event\'i ekleniyor...');
                messageInput.onkeypress = function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        console.log('Enter tuşuna basıldı');
                        sendMessage();
                    }
                };
            } else {
                console.error('Mesaj input alanı bulunamadı!');
            }
        }

        function toggleChat() {
            console.log('toggleChat çağrıldı');
            const chatWindow = document.getElementById('chatWindow');
            chatWindow.classList.toggle('hidden');
            if (!chatWindow.classList.contains('hidden')) {
                loadCVList();
                // Chat açıldığında event listener'ları tekrar kontrol et
                if (!isInitialized) {
                    console.log('Chat açıldı, event listener\'lar yeniden ekleniyor...');
                    initializeEventListeners();
                    isInitialized = true;
                }
            }
        }

        function selectCV(cvId) {
            selectedCvId = cvId;
            // Tüm CV kartlarından seçili sınıfı kaldır
            document.querySelectorAll('.cv-card').forEach(card => {
                card.classList.remove('border-blue-500', 'border-2');
                card.classList.add('border', 'border-gray-200');
            });
            
            // Seçili CV'yi vurgula
            const selectedCard = document.querySelector(`.cv-card[data-cv-id="${cvId}"]`);
            if (selectedCard) {
                selectedCard.classList.remove('border', 'border-gray-200');
                selectedCard.classList.add('border-blue-500', 'border-2');
            }

            // Analiz butonunu göster
            const analyzeButton = document.getElementById('analyzeButton');
            if (analyzeButton) {
                analyzeButton.classList.remove('hidden');
            }
        }

        async function loadCVList() {
            try {
                const response = await fetch('/Resume/GetUserCVs');
                const cvs = await response.json();
                const cvList = document.getElementById('cvList');
                cvList.innerHTML = '';

                if (cvs.length === 0) {
                    cvList.innerHTML = `
                        <div class="text-center py-8">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"/>
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">CV Bulunamadı</h3>
                            <p class="mt-1 text-sm text-gray-500">Henüz CV yüklememişsiniz.</p>
                            <div class="mt-6">
                                <a href="/Resume/Upload" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                                    CV Yükle
                                </a>
                            </div>
                        </div>
                    `;
                    return;
                }

                cvs.forEach(cv => {
                    const cvCard = document.createElement('div');
                    cvCard.className = `cv-card cursor-pointer p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow ${cv.isMainResume ? 'border-green-500 border-2' : 'border border-gray-200'}`;
                    cvCard.setAttribute('data-cv-id', cv.id);
                    cvCard.onclick = () => selectCV(cv.id);
                    cvCard.innerHTML = `
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="font-medium text-gray-900">${cv.title}</h3>
                                <p class="text-sm text-gray-500">${new Date(cv.createdDate).toLocaleDateString()}</p>
                            </div>
                            ${cv.isMainResume ? '<span class="px-2 py-1 text-xs font-medium text-green-600 bg-green-50 rounded-full">Ana CV</span>' : ''}
                        </div>
                        <div class="mt-2">
                            <p class="text-sm text-gray-600 line-clamp-2">${cv.description || 'Açıklama yok'}</p>
                        </div>
                        ${cv.skills ? `
                        <div class="mt-2 flex flex-wrap gap-1">
                            ${cv.skills.split(',').slice(0, 3).map(skill => `
                                <span class="px-2 py-1 text-xs font-medium text-gray-600 bg-gray-100 rounded-full">${skill.trim()}</span>
                            `).join('')}
                            ${cv.skills.split(',').length > 3 ? `
                                <span class="px-2 py-1 text-xs font-medium text-gray-600 bg-gray-100 rounded-full">+${cv.skills.split(',').length - 3}</span>
                            ` : ''}
                        </div>
                        ` : ''}
                    `;
                    cvList.appendChild(cvCard);
                });

                // Analiz butonu ekle
                const analyzeButton = document.createElement('button');
                analyzeButton.id = 'analyzeButton';
                analyzeButton.className = 'hidden mt-4 w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors';
                analyzeButton.innerHTML = 'Seçili CV\'yi Analiz Et';
                analyzeButton.onclick = analyzeSelectedCV;
                cvList.appendChild(analyzeButton);

            } catch (error) {
                console.error('CV listesi yüklenirken hata:', error);
            }
        }

        async function analyzeSelectedCV() {
            if (!selectedCvId) {
                alert('Lütfen bir CV seçin');
                return;
            }

            try {
                console.log('CV analizi başlatılıyor...', selectedCvId);
                
                // Gönder butonunu devre dışı bırak
                const analyzeButton = document.getElementById('analyzeButton');
                analyzeButton.disabled = true;
                analyzeButton.innerHTML = `
                    <svg class="animate-spin h-5 w-5 text-white inline mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Analiz Ediliyor...
                `;

                appendMessage('Seçili CV\'yi analiz et', false);
                
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const response = await fetch('/Home/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        content: `CV ID ${selectedCvId} için detaylı bir analiz yapar mısın? Güçlü yönleri, geliştirilmesi gereken alanları ve önerileri belirt.`
                    })
                });

                console.log('API yanıtı alındı:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('API hata detayı:', errorText);
                    throw new Error(`API yanıtı başarısız: ${response.status} ${response.statusText}`);
                }

                const data = await response.json();
                console.log('API yanıt verisi:', data);

                // Gönder butonunu tekrar aktif et
                analyzeButton.disabled = false;
                analyzeButton.innerHTML = 'Seçili CV\'yi Analiz Et';

                if (data.success) {
                    appendMessage(data.response, true);
                } else {
                    throw new Error(data.error || 'Analiz sırasında bir hata oluştu');
                }
            } catch (error) {
                console.error('CV analizi sırasında hata:', error);
                appendMessage('CV analizi sırasında bir hata oluştu: ' + error.message, true);
                
                // Hata durumunda da butonu eski haline getir
                const analyzeButton = document.getElementById('analyzeButton');
                if (analyzeButton) {
                    analyzeButton.disabled = false;
                    analyzeButton.innerHTML = 'Seçili CV\'yi Analiz Et';
                }
            }
        }

        async function sendMessage() {
            console.log('sendMessage fonksiyonu çağrıldı');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const message = messageInput.value.trim();
            
            if (!message) {
                console.log('Mesaj boş, gönderilmiyor');
                return;
            }

            console.log('Mesaj gönderiliyor:', message);

            try {
                // Gönder butonunu devre dışı bırak
                sendButton.disabled = true;
                const originalButtonHtml = sendButton.innerHTML;
                sendButton.innerHTML = `
                    <svg class="animate-spin h-5 w-5 text-white inline mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span class="ml-2">Gönderiliyor...</span>
                `;

                // Kullanıcı mesajını göster
                appendMessage(message, false);
                messageInput.value = '';

                console.log('API isteği gönderiliyor...');
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const response = await fetch('/Home/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        content: message
                    })
                });

                console.log('API yanıtı alındı:', response.status);
                const responseText = await response.text();
                console.log('API yanıt içeriği:', responseText);

                let data;
                try {
                    data = JSON.parse(responseText);
                    console.log('API yanıtı başarıyla parse edildi:', data);
                } catch (error) {
                    console.error('JSON parse hatası:', error);
                    console.error('Response text:', responseText);
                    throw new Error('API yanıtı JSON formatında değil. Yanıt: ' + responseText.substring(0, 200));
                }

                if (data.success) {
                    console.log('Başarılı yanıt, mesaj ekleniyor...');
                    appendMessage(data.response, true);
                } else {
                    throw new Error(data.error || 'Bir hata oluştu');
                }
            } catch (error) {
                console.error('Mesaj gönderme hatası:', error);
                appendMessage('Üzgünüm, bir hata oluştu: ' + error.message, true);
            } finally {
                // Her durumda butonu eski haline getir
                console.log('Buton normale döndürülüyor...');
                sendButton.disabled = false;
                sendButton.innerHTML = `
                    <span>Gönder</span>
                    <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                `;
            }
        }

        function appendMessage(message, isBot) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'flex items-start max-w-3xl mx-auto';

            if (!isBot) {
                messageDiv.classList.add('flex-row-reverse');
            }

            const iconDiv = document.createElement('div');
            iconDiv.className = 'flex-shrink-0';
            iconDiv.innerHTML = `
                <div class="w-10 h-10 rounded-full ${isBot ? 'bg-blue-500' : 'bg-gray-500'} flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="${isBot ? 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z' : 'M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'}" />
                    </svg>
                </div>
            `;

            const messageContent = document.createElement('div');
            messageContent.className = `${isBot ? 'ml-4' : 'mr-4'} bg-${isBot ? 'gray' : 'blue'}-100 rounded-lg py-3 px-4 max-w-[80%]`;
            messageContent.innerHTML = `
                <p class="text-gray-900 whitespace-pre-wrap">${message}</p>
                <p class="text-xs text-gray-500 mt-1">${new Date().toLocaleTimeString()}</p>
            `;

            messageDiv.appendChild(isBot ? iconDiv : messageContent);
            messageDiv.appendChild(isBot ? messageContent : iconDiv);
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    </script>
</body>
</html>