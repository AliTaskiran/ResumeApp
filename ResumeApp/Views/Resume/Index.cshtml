@model List<Resume>
@{
    ViewData["Title"] = "CV'lerim";
}

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Success Message -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="mb-8 bg-green-50 border-l-4 border-green-400 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-green-700">@TempData["SuccessMessage"]</p>
                    </div>
                </div>
            </div>
        }

        <!-- Error Message -->
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="mb-8 bg-red-50 border-l-4 border-red-400 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-red-700">@TempData["ErrorMessage"]</p>
                    </div>
                </div>
            </div>
        }

        <!-- Header -->
        <div class="mb-8 flex justify-between items-center">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">CV'lerim</h1>
                <p class="mt-2 text-sm text-gray-500">Yüklediğiniz CV'leri buradan yönetebilirsiniz.</p>
            </div>
            <a href="@Url.Action("Upload")" 
               class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                Yeni CV Yükle
            </a>
        </div>

        <!-- CV List -->
        <div class="bg-white shadow overflow-hidden sm:rounded-md">
            <ul role="list" class="divide-y divide-gray-200">
                @if (Model != null && Model.Any())
                {
                    foreach (var resume in Model)
                    {
                        <li>
                            <div class="px-4 py-4 sm:px-6">
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center">
                                        <p class="text-sm font-medium text-blue-600 truncate">@resume.Title</p>
                                        @if (resume.IsMainResume)
                                        {
                                            <span class="ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                Ana CV
                                            </span>
                                        }
                                    </div>
                                    <div class="ml-2 flex-shrink-0 flex">
                                        <p class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                            @resume.CreatedDate.ToString("dd.MM.yyyy HH:mm")
                                        </p>
                                    </div>
                                </div>
                                <div class="mt-2 sm:flex sm:justify-between">
                                    <div class="sm:flex">
                                        <p class="flex items-center text-sm text-gray-500">
                                            <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                            </svg>
                                            @resume.FilePath
                                        </p>
                                    </div>
                                    <div class="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                                        <div class="flex space-x-2">
                                            <button onclick="analyzeCV(@resume.Id)" 
                                                    class="inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                                </svg>
                                                Analiz Et
                                            </button>
                                            @if (!resume.IsMainResume)
                                            {
                                                <a href="@Url.Action("SetMainResume", new { id = resume.Id })" 
                                                   class="inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                                    Ana CV Yap
                                                </a>
                                            }
                                            <a href="@Url.Action("Delete", new { id = resume.Id })" 
                                               onclick="return confirm('⚠️ UYARI: Bu CV ve ona ait tüm iş başvurularınız silinecek!\n\nBu işlem geri alınamaz. Emin misiniz?')"
                                               class="inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700">
                                                Sil
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                }
                else
                {
                    <li class="px-4 py-12 text-center">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                  d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">CV Bulunamadı</h3>
                        <p class="mt-1 text-sm text-gray-500">Henüz CV yüklememişsiniz.</p>
                        <div class="mt-6">
                            <a href="@Url.Action("Upload")" 
                               class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                </svg>
                                CV Yükle
                            </a>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<!-- Analysis Modal -->
<div id="analysisModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden" style="z-index: 50;">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg p-8 max-w-6xl w-full mx-4 max-h-screen overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">CV Analizi ve Önerilen İş İlanları</h3>
                <button onclick="closeAnalysisModal()" class="text-gray-400 hover:text-gray-500">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            
            <!-- Analysis Content -->
            <div class="mb-6">
                <h4 class="text-md font-medium text-gray-900 mb-2">📋 CV Analizi</h4>
                <div id="analysisContent" class="text-sm text-gray-700 whitespace-pre-wrap bg-gray-50 p-4 rounded-lg">
                    Analiz yükleniyor...
                </div>
            </div>

            <!-- Job Recommendations -->
            <div class="mb-6">
                <h4 class="text-md font-medium text-gray-900 mb-4">🎯 Önerilen İş İlanları</h4>
                <div id="jobRecommendations" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div class="text-center text-gray-500">
                        <svg class="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2V6" />
                        </svg>
                        <p>İş ilanları yükleniyor...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .line-clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
    </style>
    <script>
        async function analyzeCV(cvId) {
            const modal = document.getElementById('analysisModal');
            const content = document.getElementById('analysisContent');
            const jobRecommendations = document.getElementById('jobRecommendations');
            modal.classList.remove('hidden');
            content.textContent = 'CV analizi yapılıyor...';
            jobRecommendations.innerHTML = '<div class="text-center text-gray-500"><svg class="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2V6" /></svg><p>İş ilanları yükleniyor...</p></div>';

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const response = await fetch('/Home/AnalyzeCV', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        cvId: cvId
                    })
                });

                const data = await response.json();

                if (data.success) {
                    content.textContent = data.response;
                    
                    // Analiz özetini sohbete gönder (tam metin çok uzun olabilir)
                    const analysisLines = data.response.split('\n');
                    const shortSummary = analysisLines.slice(0, 5).join('\n') + '\n\n✅ CV analizi tamamlandı! Detayları görmek için CV listesindeki "Analiz Et" butonuna tıklayabilirsiniz.';
                    await sendAnalysisToChat(shortSummary);
                    
                    jobRecommendations.innerHTML = ''; // Clear previous recommendations
                    if (data.jobRecommendations && data.jobRecommendations.length > 0) {
                        data.jobRecommendations.forEach(job => {
                            const jobCard = document.createElement('div');
                            jobCard.className = 'bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow';
                            jobCard.innerHTML = `
                                <div class="flex justify-between items-start mb-2">
                                    <h5 class="text-lg font-semibold text-gray-900">${job.title}</h5>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        Aktif
                                    </span>
                                </div>
                                <p class="text-sm font-medium text-blue-600 mb-1">${job.company}</p>
                                <div class="flex items-center text-sm text-gray-500 mb-2">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 0 1111.314 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                    </svg>
                                    ${job.location}
                                </div>
                                <div class="flex items-center text-sm text-gray-500 mb-2">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                                    </svg>
                                    ${job.salary}
                                </div>
                                <p class="text-sm text-gray-700 mb-3 line-clamp-3">${job.description}</p>
                                <div class="flex items-center justify-between">
                                    <div class="flex flex-wrap gap-1">
                                        ${job.skills ? job.skills.split(',').slice(0, 3).map(skill => 
                                            `<span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800">${skill.trim()}</span>`
                                        ).join('') : ''}
                                    </div>
                                    <a href="${job.url}" class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors">
                                        Detaylar
                                    </a>
                                </div>
                            `;
                            jobRecommendations.appendChild(jobCard);
                        });
                    } else {
                        jobRecommendations.innerHTML = `
                            <div class="col-span-full text-center text-gray-500 py-8">
                                <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2V6" />
                                </svg>
                                <p class="text-lg font-medium">Uygun iş ilanı bulunamadı</p>
                                <p class="text-sm mt-1">CV'nizi geliştirerek daha fazla iş fırsatı yakalayabilirsiniz.</p>
                            </div>
                        `;
                    }
                } else {
                    throw new Error('API yanıtı başarısız: ' + response.status);
                }
            } catch (error) {
                console.error('CV analizi sırasında hata:', error);
                content.textContent = 'CV analizi sırasında bir hata oluştu: ' + error.message;
                jobRecommendations.innerHTML = '<div class="text-center text-gray-500"><p>Önerilen iş ilanları yüklenirken bir hata oluştu.</p></div>';
            }
        }

        async function sendAnalysisToChat(analysisText) {
            try {
                // CV analiz sonucunu direkt sohbete gönder
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                // Önce kullanıcı mesajını ekle
                const userResponse = await fetch('/Home/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        content: 'CV analiz sonucumu göster'
                    })
                });

                // Sonra analiz sonucunu bot mesajı olarak ekle
                const botResponse = await fetch('/Home/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        content: '📊 CV Analizi Tamamlandı!\n\n' + analysisText
                    })
                });

                const data = await botResponse.json();

                if (botResponse.ok && data.success) {
                    // Ana sayfaya yönlendir ve sohbeti aç
                    setTimeout(() => {
                        window.location.href = '/Home/Index?openChat=true';
                    }, 2000);
                }
            } catch (error) {
                console.error('Analiz sohbete gönderilirken hata:', error);
            }
        }

        function closeAnalysisModal() {
            const modal = document.getElementById('analysisModal');
            modal.classList.add('hidden');
        }

        // ESC tuşu ile modalı kapatma
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeAnalysisModal();
            }
        });

        // Modal dışına tıklama ile kapatma
        document.getElementById('analysisModal').addEventListener('click', function(event) {
            if (event.target === this) {
                closeAnalysisModal();
            }
        });
    </script>
}

@* CSRF Token *@
@Html.AntiForgeryToken() 